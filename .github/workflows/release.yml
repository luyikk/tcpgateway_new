#name: release
#
#on:
#  push:
#      tags:
#        - v[0-9]+.*
#
#jobs:
#  create-release:
#     name: Create TcpGateway release
#     runs-on: ubuntu-latest
#     steps:
#      - uses: actions/checkout@v3
#        with:
#           persist-credentials: false
#      - uses: taiki-e/create-gh-release-action@v1
#        with:
#          changelog: "CHANGELOG.md"
#          title: "TcpGateway $version"
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#  upload-bins:
#    name: "Upload release binaries"
#    needs: create-release
#    strategy:
#      matrix:
#        include:
#          - target: x86_64-unknown-linux-gnu
#            os: ubuntu-latest
#            features: unity
#            ver: pb
##          - target: x86_64-unknown-linux-gnu
##            os: ubuntu-18.04
##            features: unity
##            ver: pb
#          - target: x86_64-apple-darwin
#            os: macos-latest
#            features: unity
#            ver: pb
#          - target: x86_64-pc-windows-msvc
#            os: windows-latest
#            features: unity
#            ver: pb
#
#          - target: x86_64-unknown-linux-gnu
#            os: ubuntu-latest
#            ver: pkg
##          - target: x86_64-unknown-linux-gnu
##            os: ubuntu-18.04
##            ver: pkg
#          - target: x86_64-apple-darwin
#            os: macos-latest
#            ver: pkg
#          - target: x86_64-pc-windows-msvc
#            os: windows-latest
#            ver: pkg
#
#          - target: aarch64-unknown-linux-gnu
#            os: ubuntu-latest
#            features: unity
#            ver: pb
##          - target: aarch64-unknown-linux-gnu
##            os: ubuntu-18.04
##            features: unity
##            ver: pb
#          - target: aarch64-apple-darwin
#            os: macos-latest
#            features: unity
#            ver: pb
#          - target: aarch64-pc-windows-msvc
#            os: windows-latest
#            features: unity
#            ver: pb
#
#          - target: aarch64-unknown-linux-gnu
#            os: ubuntu-latest
#            ver: pkg
##          - target: aarch64-unknown-linux-gnu
##            os: ubuntu-18.04
##            ver: pkg
#          - target: aarch64-apple-darwin
#            os: macos-latest
#            ver: pkg
#          - target: aarch64-pc-windows-msvc
#            os: windows-latest
#            ver: pkg
#
#
#
#    runs-on: ${{ matrix.os }}
#    steps:
#      - uses: actions/checkout@v3
#      - uses: taiki-e/upload-rust-binary-action@v1
#        with:
#          bin: tcpgateway
#          target: ${{ matrix.target }}
#          features: ${{ matrix.features || '' }}
#          archive: $bin-${{ matrix.ver }}-$target-${{ matrix.os }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: release

on:
  push:
    tags:
      - v[0-9]+.*

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        system:
          - image: luyikk/rust1804
            os: ubuntu1804
            bin: tcpgateway
            ver: pb
          - image: luyikk/rust_ubuntu
            os: ubuntu2204
            bin: tcpgateway
            ver: pb
          - image: luyikk/rust_ubuntu
            os: ubuntu1804
            bin: tcpgateway
            ver: pkg
          - image: luyikk/rust_ubuntu
            os: ubuntu2204
            bin: tcpgateway
            ver: pkg

    steps:
      - name: Get version from tag using github-script
        id: get_version
        uses: actions/github-script@v3
        with:
          script: |
            const tag = process.env.GITHUB_REF.split('/').pop();
            core.setOutput('version', tag.replace('v', ''));

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Rust project in Docker
        if: ${{ matrix.system.ver == 'pb' }}
        run: |
          docker run --rm -v "$(pwd)":/workspace -w /workspace ${{ matrix.system.image }} /bin/bash -c "git config --global --add safe.directory /workspace && cargo build --features unity --release"

      - name: Build Rust project in Docker
        if: ${{ matrix.system.ver == 'pkg' }}
        run: |
          docker run --rm -v "$(pwd)":/workspace -w /workspace ${{ matrix.system.image }} /bin/bash -c "git config --global --add safe.directory /workspace && cargo build --release"

      - name: Package binary
        run: |
          mkdir -p release
          cp target/release/${{ matrix.system.bin }} release/
          tar -czvf release/${{ matrix.system.bin }}-${{ matrix.system.os }}-${{ matrix.system.ver }}-${{ steps.get_version.outputs.version }}.tar.gz -C release ${{ matrix.system.bin }}

      - name: Upload Binary to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/${{ matrix.system.bin }}-${{ matrix.system.os }}-${{ matrix.system.ver }}-${{ steps.get_version.outputs.version }}.tar.gz